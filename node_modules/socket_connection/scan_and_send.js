var net = require('net');
var HOST = '192.168.0.9';
var PORT = 6969;
var noble = require('noble');

function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i= 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds) {
      break;
    }
  }
}

noble.on('stateChange', function(state) {
  if (state === 'poweredOn') {
    noble.startScanning([], true);
  } else {
    noble.stopScanning();
  }
});

noble.on('discover', function(peripheral) {
  var macAdress = peripheral.address;
  var rss = peripheral.rssi;
  var localName = peripheral.advertisement.localName;

  if (localName = "BLE_HTag_U27") {
    console.log('Device MAC address: ', macAdress, ' Rss: ', rss, ' Local Name: ', localName);
  }
});

var client = new net.Socket();
client.connect(PORT, HOST, function() {

  console.log('CONNECTED TO: ' + HOST + ':' + PORT);
  // Write a message to the socket as soon as the client is connected, the server will receive it as message from the client

  client.write('Device MAC address: ', macAdress, ' Rss: ', rss, ' Local Name: ', localName);
  
});

// Add a 'data' event handler for the client socket
// data is what the server sent to this socket
client.on('data', function(data) {

  console.log('DATA: ' + data);
  // Close the client socket completely
  client.destroy();

});

// Add a 'close' event handler for the client socket
client.on('close', function() {
  console.log('Connection closed');
});
